
compounds
    ++ => == && || ->
end compounds

keys
    Bool 'case class def 'else fn 'function 'if in Integer let 'of return switch Text 'then 'type var break
end keys


define program
    [empty] | [expression] | [function_definition] [program] % | [repeat type_definition]
end define

tokens
    boolean "false" | "true"
    undefined "undefined"
end tokens


define return_nonterminal
    return
end define

define function_definition
    def [generic_type_list] [id] '( [function_parameter_list] ') : [type] => [function_end] |
    'function [id] '( [function_parameter_list] ') '{ [NL] [function_end] [NL] '} [NL]
end define

define function_parameter_list
    [parameter_with_type], [function_parameter_list] 
    | [parameter_with_type]
end define

define parameter_with_type
    [id] : [type] | [id]
end define

define generic_type_list
    [empty] | <[generic_type]>
end define

define generic_type
    [id], [generic_type] | [id] 
end define

define expression
    [opt return_nonterminal] [end_return]
    | [var_declaration]
    | [ife]
    | [cases]
    
end define

% Ausdrücke die in JavaScript mit einem return versehen werden können am Ende der Funktion
define end_return
 [opt return_nonterminal] [sub]
    | [opt return_nonterminal] [multiplition]
    | [opt return_nonterminal] [division] 
    | [opt return_nonterminal] [string_concat]
    | [opt return_nonterminal] [equal]
    | [opt return_nonterminal] [and]
    | [opt return_nonterminal] [or]
    | [opt return_nonterminal] [addition]
    | [opt return_nonterminal] [atom]
end define

% einfach nur das Funktionsende in den beiden Sprachen
define function_end
    [expression]
    | [return_nonterminal] [expression] 
end define

define or
    [atom]
    | [atom] '|| [expression]
end define

define and
    [atom]
    | [atom] && [expression]
end define

define equal
    [atom]
    | [atom] == [expression]
end define

define addition
    [atom]
    | [atom] + [expression]
end define

define sub
    [atom]
    | [atom] - [expression]
end define

define multiplition
    [atom]
    | [atom] * [expression]
end define

define division
    [atom]
    | [atom] / [expression]
end define

% kann man bestimmt gut für die Präsentation nehmen
define string_concat
    [atom]
    | [atom] ++ [expression]
    | [atom] + [expression]
end define

define var_declaration
    let [id] '= [expression] in [expression]
    | [opt return_nonterminal] var [id] '= [expression] [NL] [expression] % das nach dem in ist einfach ein Ausdruck der in eine neue Zeile muss
end define


define atom
   [number]
   | [stringlit]
   | [boolean]
   | [id]
   | [lambda]
   | [function_call]
end define

define lambda
   fn [id] => [function_end]
   | fn [id] : [type]  => [function_end]
   | '( [id] ') => '{ [NL] [function_end] [NL] '}
end define

define type
    Bool
    | Integer
    | Text
    | [type]
    | [type] -> [type]
end define

define condition % erstmal drin lassen vileeicht für if noch ganz pracktisch S
    [boolean] 
    | [equal] 
end define


define ife
    'if  '( [expression] ') 'then [expression] 'else [expression] 
    |'if '( [expression] ') '{ [NL] [expression] [NL] '} 'else '{ [NL] [expression] [NL]'}
end define

define cases 
    'case [expression] '{ [repeat branches+] '}
    | switch '( [expression] ') '{ [NL] [repeat branches] '}
end define

define branches 
    'of [expression] => [expression]  [opt branches]
    |'case [expression] : [expression] [NL] break; [NL] [opt branches]
end define

% ist in beiden Sprachen gleich
define function_call
    [id] '( [expression] ') [function_call]
    | '( [expression] ') [function_call]
    | [empty]
end define